#include<stdio.h>
#include<stdlib.h>
void ins();
void display();
void rev();
struct Node
{
	int data;
	struct Node *next;
}*head=NULL;
struct Node *create()
{
	struct Node *newnode;
	int val;
	newnode=(struct Node*)malloc(sizeof(struct Node));
	printf("\nEnter a value:");
	scanf("%d",&val);
	newnode->data=val;
	newnode->next=NULL;
	return newnode;
}
void main()
{
	int ch;
	while(1)
	{
		printf("\n1.Insert\n2.reverse\n3.Display\n4.Exit");
		printf("\nEnter your choice:");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:ins();break;
			case 2:rev();break;
			case 3:display();break;
			case 4:exit(0);
			default:printf("\nWrong choice");
		}
	}
}
void ins()
{
	struct Node *newnode,*temp;
	newnode=create();
	if(head==NULL)
	{
		head=newnode;
	}
	else
	{
		temp=head;
		while(temp->next!=NULL)
		{
			temp=temp->next;
		}
		temp->next=newnode;
	}
}
void display()
{
	struct Node *temp;
	if(head==NULL)
	{
		printf("\nList is empty");
	}
	else
	{
		temp=head;
		printf("\nHead->");
		while(temp!=NULL)
		{
			printf("%d->",temp->data);
			temp=temp->next;
		}
		printf("NULL");
	}
}
void rev()
{
	struct Node *temp1,*temp2;
	if(head==NULL)
	{
		printf("\nList is empty reverse is not possible");
	}
	else
	{
		temp1=NULL;
		temp2=NULL;
		while(head!=NULL)
		{
			temp2=head->next;
			head->next=temp1;
			temp1=head;
			head=temp2;
		}
		head=temp1;
		printf("\nList is reversed..");
	}
}
